import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

import processing.core.PApplet;

public class Build  extends PApplet{
	public static void main(String[] args) {
		PApplet.main("Build");
	}
	Toothpick start;
	int[] maxes = {1,3,7,11,15,23,35,43,47,55,67,79,95,123,155,171,175,183,195,207,223,251,283,303,319,347,383,423,483,571,651,683,687,695,707,719,735,763,795,815,831,859,895,935,995,1083,1163,1199,1215,1243,1279,1319,1379,1467,1551,1607,1667,1759,1871,2011,2219,2475,2667,2731,2735,2743,2755,2767,2783,2811,2843,2863,2879,2907,2943,2983,3043,3131,3211,3247,3263,3291,3327,3367,3427,3515,3599,3655,3715,3807,3919,4059,4267,4523,4715,4783,4799,4827,4863,4903,4963,5051,5135,5191,5251,5343,5455,5595,5803,6059,6255,6343,6403,6495,6607,6747,6955,7215,7439,7611,7823,8119,8483,8971,9643,10347,10795,10923,10927,10935,10947,10959,10975,11003,11035,11055,11071,11099,11135,11175,11235,11323,11403,11439,11455,11483,11519,11559,11619,11707,11791,11847,11907,11999,12111,12251,12459,12715,12907,12975,12991,13019,13055,13095,13155,13243,13327,13383,13443,13535,13647,13787,13995,14251,14447,14535,14595,14687,14799,14939,15147,15407,15631,15803,16015,16311,16675,17163,17835,18539,18987,19119,19135,19163,19199,19239,19299,19387,19471,19527,19587,19679,19791,19931,20139,20395,20591,20679,20739,20831,20943,21083,21291,21551,21775,21947,22159,22455,22819,23307,23979,24683,25135,25287,25347,25439,25551,25691,25899,26159,26383,26555,26767,27063,27427,27915,28587,29295,29775,30011,30223,30519,30883,31371,32047,32791,33411,33967,34687,35643,36859,38507,40555,42411,43435,43691,43695,43703,43715,43727,43743,43771,43803,43823,43839,43867,43903,43943,44003,44091,44171,44207,44223,44251,44287,44327,44387,44475,44559,44615,44675,44767,44879,45019,45227,45483,45675,45743,45759,45787,45823,45863,45923,46011,46095,46151,46211,46303,46415,46555,46763,47019,47215,47303,47363,47455,47567,47707,47915,48175,48399,48571,48783,49079,49443,49931,50603,51307,51755,51887,51903,51931,51967,52007,52067,52155,52239,52295,52355,52447,52559,52699,52907,53163,53359,53447,53507,53599,53711,53851,54059,54319,54543,54715,54927,55223,55587,56075,56747,57451,57903,58055,58115,58207,58319,58459,58667,58927,59151,59323,59535,59831,60195,60683,61355,62063,62543,62779,62991,63287,63651,64139,64815,65559,66179,66735,67455,68411,69627,71275,73323,75179,76203,76463,76479,76507,76543,76583,76643,76731,76815,76871,76931,77023,77135,77275,77483,77739,77935,78023,78083,78175,78287,78427,78635,78895,79119,79291,79503,79799,80163,80651,81323,82027,82479,82631,82691,82783,82895,83035,83243,83503,83727,83899,84111,84407,84771,85259,85931,86639,87119,87355,87567,87863,88227,88715,89391,90135,90755,91311,92031,92987,94203,95851,97899,99755,100783,101063,101123,101215,101327,101467,101675,101935,102159,102331,102543,102839,103203,103691,104363,105071,105551,105787,105999,106295,106659,107147,107823,108567,109187,109743,110463,111419,112635,114283,116331,118191,119247,119611,119823,120119,120483,120971,121647,122391,123011,123567,124287,125243,126459,128107,130159,132055,133251,133935,134655,135611,136827,138479,140575,142683,144479,146311,148707,151835,155915,161259,167211,171947,174251,174763,174767,174775,174787,174799,174815,174843,174875,174895,174911,174939,174975,175015,175075,175163,175243,175279,175295,175323,175359,175399,175459,175547,175631,175687,175747,175839,175951,176091,176299,176555,176747,176815,176831,176859,176895,176935,176995,177083,177167,177223,177283,177375,177487,177627,177835,178091,178287,178375,178435,178527,178639,178779,178987,179247,179471,179643,179855,180151,180515,181003,181675,182379,182827,182959,182975,183003,183039,183079,183139,183227,183311,183367,183427,183519,183631,183771,183979,184235,184431,184519,184579,184671,184783,184923,185131,185391,185615,185787,185999,186295,186659,187147,187819,188523,188975,189127,189187,189279,189391,189531,189739,189999,190223,190395,190607,190903,191267,191755,192427,193135,193615,193851,194063,194359,194723,195211,195887,196631,197251,197807,198527,199483,200699,202347,204395,206251,207275,207535,207551,207579,207615,207655,207715,207803,207887,207943,208003,208095,208207,208347,208555,208811,209007,209095,209155,209247,209359,209499,209707,209967,210191,210363,210575,210871,211235,211723,212395,213099,213551,213703,213763,213855,213967,214107,214315,214575,214799,214971,215183,215479,215843,216331,217003,217711,218191,218427,218639,218935,219299,219787,220463,221207,221827,222383,223103,224059,225275,226923,228971,230827,231855,232135,232195,232287,232399,232539,232747,233007,233231,233403,233615,233911,234275,234763,235435,236143,236623,236859,237071,237367,237731,238219,238895,239639,240259,240815,241535,242491,243707,245355,247403,249263,250319,250683,250895,251191,251555,252043,252719,253463,254083,254639,255359,256315,257531,259179,261231,263127,264323,265007,265727,266683,267899,269551,271647,273755,275551,277383,279779,282907,286987,292331,298283,303019,305323,305839,305855,305883,305919,305959,306019,306107,306191,306247,306307,306399,306511,306651,306859,307115,307311,307399,307459,307551,307663,307803,308011,308271,308495,308667,308879,309175,309539,310027,310699,311403,311855,312007,312067,312159,312271,312411,312619,312879,313103,313275,313487,313783,314147,314635,315307,316015,316495,316731,316943,317239,317603,318091,318767,319511,320131,320687,321407,322363,323579,325227,327275,329131,330159,330439,330499,330591,330703,330843,331051,331311,331535,331707,331919,332215,332579,333067,333739,334447,334927,335163,335375,335671,336035,336523,337199,337943,338563,339119,339839,340795,342011,343659,345707,347567,348623,348987,349199,349495,349859,350347,351023,351767,352387,352943,353663,354619,355835,357483,359535,361431,362627,363311,364031,364987,366203,367855,369951,372059,373855,375687,378083,381211,385291,390635,396587,401323,403631,404167,404227,404319,404431,404571,404779,405039,405263,405435,405647,405943,406307,406795,407467,408175,408655,408891,409103,409399,409763,410251,410927,411671,412291,412847,413567,414523,415739,417387,419435,421295,422351,422715,422927,423223,423587,424075,424751,425495,426115,426671,427391,428347,429563,431211,433263,435159,436355,437039,437759,438715,439931,441583,443679,445787,447583,449415,451811,454939,459019,464363,470315,475055,477391,478011,478223,478519,478883,479371,480047,480791,481411,481967,482687,483643,484859,486507,488559,490455,491651,492335,493055,494011,495227,496879,498975,501083,502879,504711,507107,510235,514315,519659,525615,530391,532867,533807,534527,535483,536699,538351,540447,542555,544351,546183 };
	int iterations;
	int count;
	Queue<Toothpick> q;
	ArrayList<Coordinate> ends;
	
	public void settings() {
		size(750,750);
	}
	
	public void setup() {
		q = new LinkedList<Toothpick>();
		ends = new ArrayList<Coordinate>();
		iterations = 1;
		frameRate(10) ;
	}
	
	public void draw() {
		background(255);
		count = 1;
		if(iterations>500/Toothpick.size) {
			Toothpick.size = Math.max(0, --Toothpick.size);
		}
		if(iterations==127) {
			noLoop();
		}
		q.clear();
		ends.clear();
		start = new Toothpick(this, new Coordinate(width/2,width/2-Toothpick.size),new Coordinate(width/2,width/2+Toothpick.size));
		start.plot();
		ends.add(start.end1);
		ends.add(start.end2);
		construct();
		iterations++;
	}
	
	public void construct() {
		q.add(start);
		while(!q.isEmpty() && count < maxes[iterations]){
			Toothpick t = q.poll();
			addToothpicksToEnds(t);
		}
	}
	
	public void addToothpicksToEnds(Toothpick tp) {
		Toothpick newTp;
		if(ends.indexOf(tp.end1) == ends.lastIndexOf(tp.end1)) { //end1
			if(tp.end1.x == tp.end2.x) { //Vertical
				newTp = new Toothpick(this,tp.end1,'v');
			}
			else { //Horizontal
				newTp = new Toothpick(this,tp.end1,'h');
			}
			newTp.plot();
			q.add(newTp);
			ends.add(newTp.end1);
			ends.add(newTp.end2);
			count++;
		}
		if(ends.indexOf(tp.end2) == ends.lastIndexOf(tp.end2)) { //end2
			if(tp.end1.x == tp.end2.x) { //Vertical
				newTp = new Toothpick(this,tp.end2,'v');
			}
			else { //Horizontal
				newTp = new Toothpick(this,tp.end2,'h');				
			}
			newTp.plot();
			q.add(newTp);
			ends.add(newTp.end1);
			ends.add(newTp.end2);
			count++;
		}
	}
}
